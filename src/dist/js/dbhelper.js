initIDB=(()=>("indexedDB"in window||console.log("This browser doesnt support idb"),idb.open("restaurant-app",3,function(e){switch(e.oldVersion){case 0:console.log("Creating the restaurants object store"),e.createObjectStore("restaurants",{keyPath:"id"});case 1:console.log("Creating the reviews object store"),e.createObjectStore("reviews",{keyPath:"id"});case 2:console.log("Creating restaurant id index"),e.transaction.objectStore("reviews").createIndex("restaurant_id","restaurant_id");case 3:console.log("Creating the reviews object store"),e.createObjectStore("reviews_offline",{keyPath:"id"})}})));let res={};class DBHelper{static fetchRestaurants(e){initIDB().then(function(t){t&&t.transaction("restaurants","readwrite").objectStore("restaurants").getAll().then(r=>{if(r.length>0){res.restaurants=r;const t=res.restaurants;e(null,t)}else fetch("http://localhost:1337/restaurants").then(e=>e.json()).then(r=>{res.restaurants=r;const s=res.restaurants;var n=t.transaction("restaurants","readwrite").objectStore("restaurants");s.forEach(e=>{n.put(e)}),n.getAll().then(t=>{e(null,s)})}).catch(t=>{e(t,null)})})})}static fetchReviews(e,t){console.log("fetch Reviews",e),initIDB().then(r=>{if(!r)return;let s=Number(e);r.transaction("reviews","readwrite").objectStore("reviews").index("restaurant_id").getAll(s).then(s=>{if(console.log("items",s),!(s.length>0))return fetch(`http://localhost:1337/reviews/?restaurant_id=${e}`).then(e=>e.json()).then(e=>{console.log("response",e),console.log("aftr response",e);var s=r.transaction("reviews","readwrite").objectStore("reviews");e.forEach(e=>{e.restaurant_id=Number(e.restaurant_id),s.put(e)}),self.restaurant.reviews=e,t(null,self.restaurant.reviews)});s.restaurant_id=Number(s.restaurant_id),self.restaurant.reviews=s,t(null,self.restaurant.reviews)})})}static mapMarkerForRestaurant(e,t){return new google.maps.Marker({position:e.latlng,title:e.name,url:DBHelper.urlForRestaurant(e),map:t,animation:google.maps.Animation.DROP})}static fetchRestaurantById(e,t){DBHelper.fetchRestaurants((r,s)=>{if(r)t(r,null);else{const r=s.find(t=>t.id==e);r?t(null,r):t("Restaurant does not exist",null)}})}static controlFav(e){return fetch(`http://localhost:1337/restaurants/${e}/`,{method:"GET",headers:{"Content-Type":"application/json"}}).then(e=>(console.log("response status:",e),e.json())).then(e=>(console.log("response status:",e.is_favorite),e.is_favorite))}static fetchRestaurantByCuisine(e,t){DBHelper.fetchRestaurants((r,s)=>{if(r)t(r,null);else{const r=s.filter(t=>t.cuisine_type==e);t(null,r)}})}static fetchRestaurantByNeighborhood(e,t){DBHelper.fetchRestaurants((r,s)=>{if(r)t(r,null);else{const r=s.filter(t=>t.neighborhood==e);t(null,r)}})}static fetchRestaurantByCuisineAndNeighborhood(e,t,r){DBHelper.fetchRestaurants((s,n)=>{if(s)r(s,null);else{let s=n;"all"!=e&&(s=s.filter(t=>t.cuisine_type==e)),"all"!=t&&(s=s.filter(e=>e.neighborhood==t)),r(null,s)}})}static fetchNeighborhoods(e){DBHelper.fetchRestaurants((t,r)=>{if(t)e(t,null);else{const t=r.map((e,t)=>r[t].neighborhood),s=t.filter((e,r)=>t.indexOf(e)==r);e(null,s)}})}static fetchCuisines(e){DBHelper.fetchRestaurants((t,r)=>{if(t)e(t,null);else{const t=r.map((e,t)=>r[t].cuisine_type),s=t.filter((e,r)=>t.indexOf(e)==r);e(null,s)}})}static urlForRestaurant(e){return`./restaurant.html?id=${e.id}`}static imageUrlForRestaurant(e){return`/img/${e.photograph}`}}"serviceWorker"in navigator||console.log("Service worker not supported"),navigator.serviceWorker.register("/sw.js").then(function(e){}).catch(function(e){console.log("Registration failed:",e)});